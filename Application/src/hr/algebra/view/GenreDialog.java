/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hr.algebra.view;

import hr.algebra.dal.Repository;
import hr.algebra.dal.RepositoryFactory;
import hr.algebra.models.ArtistTransferable;
import hr.algebra.models.Genre;
import hr.algebra.models.GenreTransferable;
import hr.algebra.models.Movie;
import hr.algebra.utils.MessageUtils;
import java.awt.Frame;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.IOException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.DropMode;
import javax.swing.JComponent;
import javax.swing.ListSelectionModel;
import javax.swing.TransferHandler;
import static javax.swing.TransferHandler.COPY;

/**
 *
 * @author arjan
 */
public class GenreDialog extends javax.swing.JDialog {

    private Repository repo;
    private Movie selectedMovie;
    private List<Genre> movieGenres;
    private List<Genre> allGenres;
    private DefaultListModel<Genre> genresModel = new DefaultListModel<>();
    private DefaultListModel<Genre> allGenresModel = new DefaultListModel<>();

    /**
     * Creates new form GenreDialog
     */
    public GenreDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    public GenreDialog(Movie selectedMovie, Frame owner, boolean modal) {
        super(owner, modal);
        initComponents();
        this.selectedMovie = selectedMovie;
        initDragNDrop();
        try {
            initLists();
        } catch (Exception ex) {
            java.util.logging.Logger.getLogger(GenreDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
        initGenres();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        lsMovieGenres = new javax.swing.JList<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        jScrollPane4 = new javax.swing.JScrollPane();
        lsAllGenres = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnSave = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        lsMovieGenres.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(lsMovieGenres);

        jScrollPane1.setViewportView(jScrollPane2);

        lsAllGenres.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane4.setViewportView(lsAllGenres);

        jScrollPane3.setViewportView(jScrollPane4);

        jLabel1.setText("Movie genre");

        jLabel2.setText("All genres");

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(btnSave, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(23, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 434, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addGap(37, 37, 37)
                .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(88, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        movieGenres.forEach(g -> {
            try {
                List<Genre> tmp = repo.getGenresForMovie(selectedMovie.getId());
                if(!tmp.contains(g))
                    repo.addGenreForMovie(g, selectedMovie);
            } catch (Exception ex) {
                Logger.getLogger(GenreDialog.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
        MessageUtils.showInformationMessage("SUCCESS","Movie genres succesfully updated!");
        this.show(false);
    }//GEN-LAST:event_btnSaveActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GenreDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GenreDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GenreDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GenreDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                GenreDialog dialog = new GenreDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSave;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JList<Genre> lsAllGenres;
    private javax.swing.JList<Genre> lsMovieGenres;
    // End of variables declaration//GEN-END:variables

    private void initLists() throws Exception {
        repo = RepositoryFactory.getRepository();
        movieGenres = repo.getGenresForMovie(selectedMovie.getId());
        allGenres = repo.getGenres();
        for (Genre movieGenre : movieGenres) {
            if (allGenres.contains(movieGenre)) {
                allGenres.remove(movieGenre);
            }
        }
    }

    private void initDragNDrop() {
        lsMovieGenres.setDropMode(DropMode.ON);
        lsMovieGenres.setTransferHandler(new GenreDialog.ImportTransferHandler());

        lsAllGenres.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        lsAllGenres.setDragEnabled(true);
        lsAllGenres.setTransferHandler(new GenreDialog.ExportTransferHandler());
    }

    private void initGenres() {
        genresModel.clear();
        movieGenres.forEach(genresModel::addElement);
        lsMovieGenres.setDropMode(DropMode.ON);
        lsMovieGenres.setTransferHandler(new ImportTransferHandler());
        lsMovieGenres.setModel(genresModel);

        allGenresModel.clear();
        lsAllGenres.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        lsAllGenres.setDragEnabled(true);
        lsAllGenres.setTransferHandler(new ExportTransferHandler());
        allGenres.forEach(allGenresModel::addElement);
        lsAllGenres.setModel(allGenresModel);

    }

    private class ImportTransferHandler extends TransferHandler {

        @Override
        public boolean canImport(TransferSupport support) {
            return support.isDataFlavorSupported(GenreTransferable.GENRE_FLAVOR);
        }

        @Override
        public boolean importData(TransferSupport support) {
             Transferable transferable = support.getTransferable();
            try {
                Genre add = (Genre) transferable.getTransferData(GenreTransferable.GENRE_FLAVOR);
                if (movieGenres.add(add)) {
                    allGenres.remove(add);
                    initGenres();
                    return true;
                }
            } catch (UnsupportedFlavorException | IOException ex) {
                java.util.logging.Logger.getLogger(ArtistDialog.class.getName()).log(Level.SEVERE, null, ex);
            }
            return false;
        
        }

    }
    
     private class ExportTransferHandler extends TransferHandler {

        @Override
        public int getSourceActions(JComponent c) {
            return COPY;
        }

        @Override
        public Transferable createTransferable(JComponent c) {
            return new GenreTransferable(lsAllGenres.getSelectedValue());
        }

    }
}
