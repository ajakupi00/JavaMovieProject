/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hr.algebra.view;

import hr.algebra.Dashboard;
import hr.algebra.dal.Repository;
import hr.algebra.dal.RepositoryFactory;
import hr.algebra.models.Artist;
import hr.algebra.models.Genre;
import hr.algebra.models.Role;
import hr.algebra.utils.MessageUtils;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.ListSelectionModel;

/**
 *
 * @author arjan
 */
public class CRUDPanel extends javax.swing.JPanel {

    private Repository repository;
    private Genre selectedGenre;
    private Artist selectedActor;
    private Artist selectedDirector;

    
    private Role ACTOR;
    private Role DIRECTOR;
    private DefaultListModel<Genre> genresModel = new DefaultListModel<Genre>();
    private DefaultListModel<Artist> actorsModel = new DefaultListModel<Artist>();
    private DefaultListModel<Artist> directorsModel = new DefaultListModel<Artist>();

    /**
     * Creates new form CRUDPanel
     */
    public CRUDPanel() {
        try {
            initComponents();
            repository = RepositoryFactory.getRepository();
            ACTOR = repository.getRole(1).get();
            DIRECTOR = repository.getRole(2).get();
            initLists();
        } catch (Exception ex) {
            Logger.getLogger(CRUDPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lsGenres = new javax.swing.JList<>();
        btnAddGenre = new javax.swing.JButton();
        btnDeleteGenre = new javax.swing.JButton();
        btnUpdateGenre = new javax.swing.JButton();
        tfGenre = new javax.swing.JTextField();
        lblErrorGenre = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        lsActors = new javax.swing.JList<>();
        btnAddActor = new javax.swing.JButton();
        btnDeleteActor = new javax.swing.JButton();
        btnUpdateActor = new javax.swing.JButton();
        tfActor = new javax.swing.JTextField();
        btnUpdateDirector = new javax.swing.JButton();
        tfDirector = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        lsDirectors = new javax.swing.JList<>();
        btnAddDirector = new javax.swing.JButton();
        btnDeleteDirector = new javax.swing.JButton();
        lblActorError = new javax.swing.JLabel();
        lblDirectorError = new javax.swing.JLabel();

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jLabel1.setText("Genres");

        lsGenres.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lsGenresValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(lsGenres);

        btnAddGenre.setText("ADD");
        btnAddGenre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddGenreActionPerformed(evt);
            }
        });

        btnDeleteGenre.setText("DELETE");
        btnDeleteGenre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteGenreActionPerformed(evt);
            }
        });

        btnUpdateGenre.setText("UPDATE");
        btnUpdateGenre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateGenreActionPerformed(evt);
            }
        });

        lblErrorGenre.setForeground(new java.awt.Color(255, 0, 0));

        jLabel2.setText("Actors");

        lsActors.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lsActorsValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(lsActors);

        btnAddActor.setText("ADD");
        btnAddActor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActorActionPerformed(evt);
            }
        });

        btnDeleteActor.setText("DELETE");
        btnDeleteActor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActorActionPerformed(evt);
            }
        });

        btnUpdateActor.setText("UPDATE");
        btnUpdateActor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActorActionPerformed(evt);
            }
        });

        btnUpdateDirector.setText("UPDATE");
        btnUpdateDirector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateDirectorActionPerformed(evt);
            }
        });

        jLabel3.setText("Directors");

        lsDirectors.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lsDirectorsValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(lsDirectors);

        btnAddDirector.setText("ADD");
        btnAddDirector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddDirectorActionPerformed(evt);
            }
        });

        btnDeleteDirector.setText("DELETE");
        btnDeleteDirector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteDirectorActionPerformed(evt);
            }
        });

        lblActorError.setForeground(new java.awt.Color(255, 0, 0));

        lblDirectorError.setForeground(new java.awt.Color(255, 0, 0));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel1)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addComponent(btnDeleteGenre, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnUpdateGenre, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnAddGenre, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(tfGenre, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblErrorGenre)))
                .addGap(257, 257, 257)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel2)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addComponent(btnDeleteActor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnUpdateActor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnAddActor, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(tfActor, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblActorError, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(250, 250, 250)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel3)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addComponent(btnDeleteDirector, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnUpdateDirector, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnAddDirector, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(tfDirector, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblDirectorError)))
                .addContainerGap(64, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3)
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfDirector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblDirectorError))
                        .addGap(18, 18, 18)
                        .addComponent(btnAddDirector)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnUpdateDirector)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnDeleteDirector))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2)
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfActor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblActorError, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(btnAddActor)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnUpdateActor)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnDeleteActor))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfGenre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblErrorGenre))
                        .addGap(18, 18, 18)
                        .addComponent(btnAddGenre)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnUpdateGenre)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnDeleteGenre)))
                .addGap(191, 191, 191))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnDeleteGenreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteGenreActionPerformed
        if (selectedGenre != null) {
            if (MessageUtils.showConfirmDialog("DELETE GENRE?", "If you delete this genre, all movies will lose this genre...") == 0) {
                try {
                    repository.deleteGenre(selectedGenre.getId());
                    selectedGenre = null;
                    tfGenre.setText("");
                    initGenresList();
                    MessageUtils.showInformationMessage("SUCCESS", "Genre succesfully deleted!");
                } catch (Exception ex) {
                    MessageUtils.showErrorMessage("OOOPS", "SOMETHING WENT WRONG!");
                    Logger.getLogger(CRUDPanel.class.getName()).log(Level.SEVERE, null, ex);
                }

            }

        }
    }//GEN-LAST:event_btnDeleteGenreActionPerformed

    private void btnAddGenreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddGenreActionPerformed
        if (!tfGenre.getText().trim().isEmpty()) {
            lblErrorGenre.setText("");
            Genre newGenre = new Genre(tfGenre.getText().trim());
            try {
                repository.createGenre(newGenre);
                MessageUtils.showInformationMessage("SUCCESS", "New genre succesfully added!");
                tfGenre.setText("");
                initGenresList();
            } catch (Exception ex) {
                MessageUtils.showErrorMessage("OOOPS", "SOMETHING WENT WRONG!");
                Logger.getLogger(CRUDPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            lblErrorGenre.setText("X");
        }

    }//GEN-LAST:event_btnAddGenreActionPerformed

    private void btnUpdateGenreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateGenreActionPerformed
        if (selectedGenre != null) {
            selectedGenre.setName(tfGenre.getText().trim());
            try {
                repository.updateGenre(selectedGenre);
                selectedGenre = null;
                tfGenre.setText("");
                MessageUtils.showInformationMessage("SUCCESS", "Genre succesfully updated!");
                initGenresList();
            } catch (Exception ex) {
                MessageUtils.showErrorMessage("OOOPS", "SOMETHING WENT WRONG!");
                Logger.getLogger(CRUDPanel.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }//GEN-LAST:event_btnUpdateGenreActionPerformed


    private void lsGenresValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lsGenresValueChanged
        selectedGenre = lsGenres.getSelectedValue();
        tfGenre.setText(selectedGenre.getName().trim());
    }//GEN-LAST:event_lsGenresValueChanged

    private void lsActorsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lsActorsValueChanged
         selectedActor = lsActors.getSelectedValue();
        tfActor.setText(selectedActor.getName().trim());
    }//GEN-LAST:event_lsActorsValueChanged

    private void btnAddActorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActorActionPerformed
         if (!tfActor.getText().trim().isEmpty()) {
            lblActorError.setText("");
            Artist newActor = new Artist(tfActor.getText().trim(), ACTOR);
            try {
                repository.createArtist(newActor);
                MessageUtils.showInformationMessage("SUCCESS", "Actor succesfully added!");
                tfActor.setText("");
                initActorsList();
            } catch (Exception ex) {
                MessageUtils.showErrorMessage("OOOPS", "SOMETHING WENT WRONG!");
                Logger.getLogger(CRUDPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            lblActorError.setText("X");
        }
    }//GEN-LAST:event_btnAddActorActionPerformed

    private void btnDeleteActorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActorActionPerformed
       if (selectedActor != null) {
            if (MessageUtils.showConfirmDialog("DELETE ACTOR?", "If you delete this actor, all movies will lose this actor...") == 0) {
                try {
                    repository.deleteArtist(selectedActor.getId());
                    selectedActor = null;
                    tfActor.setText("");
                    initActorsList();
                    MessageUtils.showInformationMessage("SUCCESS", "Actor succesfully deleted!");
                } catch (Exception ex) {
                    MessageUtils.showErrorMessage("OOOPS", "SOMETHING WENT WRONG!");
                    Logger.getLogger(CRUDPanel.class.getName()).log(Level.SEVERE, null, ex);
                }

            }

        }
    }//GEN-LAST:event_btnDeleteActorActionPerformed

    private void btnUpdateActorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActorActionPerformed
       if (selectedActor != null) {
            selectedActor.setName(tfActor.getText().trim());
            try {
                repository.updateArtist(selectedActor);
                selectedActor = null;
                tfActor.setText("");
                MessageUtils.showInformationMessage("SUCCESS", "Actor succesfully updated!");
                initGenresList();
            } catch (Exception ex) {
                MessageUtils.showErrorMessage("OOOPS", "SOMETHING WENT WRONG!");
                Logger.getLogger(CRUDPanel.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }//GEN-LAST:event_btnUpdateActorActionPerformed

    private void btnUpdateDirectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateDirectorActionPerformed
       if (selectedDirector != null) {
            selectedDirector.setName(tfDirector.getText().trim());
            try {
                repository.updateArtist(selectedDirector);
                selectedDirector = null;
                tfDirector.setText("");
                MessageUtils.showInformationMessage("SUCCESS", "Director succesfully updated!");
                initDirectorsList();
            } catch (Exception ex) {
                MessageUtils.showErrorMessage("OOOPS", "SOMETHING WENT WRONG!");
                Logger.getLogger(CRUDPanel.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }//GEN-LAST:event_btnUpdateDirectorActionPerformed

    private void lsDirectorsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lsDirectorsValueChanged
        selectedDirector = lsDirectors.getSelectedValue();
        tfDirector.setText(selectedDirector.getName().trim());
    }//GEN-LAST:event_lsDirectorsValueChanged

    private void btnAddDirectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddDirectorActionPerformed
         if (!tfDirector.getText().trim().isEmpty()) {
            lblActorError.setText("");
            Artist newDirector = new Artist(tfActor.getText().trim(), DIRECTOR);
            try {
                repository.createArtist(newDirector);
                MessageUtils.showInformationMessage("SUCCESS", "New movie director succesfully added!");
                tfDirector.setText("");
                initDirectorsList();
            } catch (Exception ex) {
                MessageUtils.showErrorMessage("OOOPS", "SOMETHING WENT WRONG!");
                Logger.getLogger(CRUDPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            lblActorError.setText("X");
        }
    }//GEN-LAST:event_btnAddDirectorActionPerformed

    private void btnDeleteDirectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteDirectorActionPerformed
        if (selectedDirector != null) {
            if (MessageUtils.showConfirmDialog("DELETE THIS DIRECTOR?", "If you delete this movie director, all movies will lose him/her...") == 0) {
                try {
                    repository.deleteArtist(selectedDirector.getId());
                    selectedDirector = null;
                    tfDirector.setText("");
                    initDirectorsList();
                    MessageUtils.showInformationMessage("SUCCESS", "Movie director succesfully deleted!");
                } catch (Exception ex) {
                    MessageUtils.showErrorMessage("OOOPS", "SOMETHING WENT WRONG!");
                    Logger.getLogger(CRUDPanel.class.getName()).log(Level.SEVERE, null, ex);
                }

            }

        }
    }//GEN-LAST:event_btnDeleteDirectorActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
         if(Dashboard.MOVIES_UPDATED){
            MessageUtils.showInformationMessage("UPDATE", "Wait a moment while we update the movies...");
            this.disable();
            initLists();
             MessageUtils.showInformationMessage("ENTITIES UPDATED!", "Entities succesfully updated...");
            this.enable();
            Dashboard.MOVIES_UPDATED = false;
        }
    }//GEN-LAST:event_formComponentShown


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddActor;
    private javax.swing.JButton btnAddDirector;
    private javax.swing.JButton btnAddGenre;
    private javax.swing.JButton btnDeleteActor;
    private javax.swing.JButton btnDeleteDirector;
    private javax.swing.JButton btnDeleteGenre;
    private javax.swing.JButton btnUpdateActor;
    private javax.swing.JButton btnUpdateDirector;
    private javax.swing.JButton btnUpdateGenre;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblActorError;
    private javax.swing.JLabel lblDirectorError;
    private javax.swing.JLabel lblErrorGenre;
    private javax.swing.JList<Artist> lsActors;
    private javax.swing.JList<Artist> lsDirectors;
    private javax.swing.JList<Genre> lsGenres;
    private javax.swing.JTextField tfActor;
    private javax.swing.JTextField tfDirector;
    private javax.swing.JTextField tfGenre;
    // End of variables declaration//GEN-END:variables

    private void initGenresList() {
        try {
            genresModel = new DefaultListModel<>();
            lsGenres.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
            repository.getGenres().forEach(genresModel::addElement);
            lsGenres.setModel(genresModel);
        } catch (Exception ex) {
            Logger.getLogger(CRUDPanel.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void initLists() {
        initGenresList();
        initActorsList();
        initDirectorsList();
    }

    private void initActorsList() {
        try {
            actorsModel = new DefaultListModel<>();
            lsActors.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
            List<Artist> artists = repository.getArtists();
            List<Artist> actors = new ArrayList<>();
            for (Artist a : artists) {
                if (a.getRole().getName().equals(ACTOR.getName())) {
                    actors.add(a);
                }
            }
            actors.forEach(actorsModel::addElement);
            lsActors.setModel(actorsModel);
        } catch (Exception ex) {
            Logger.getLogger(CRUDPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void initDirectorsList() {
        try {
            directorsModel = new DefaultListModel<>();
            lsActors.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
            List<Artist> artists = repository.getArtists();
            List<Artist> directors = new ArrayList<>();
            for (Artist a : artists) {
                if (a.getRole().getName().equals(DIRECTOR.getName())) {
                    directors.add(a);
                }
            }
            directors.forEach(directorsModel::addElement);
            lsDirectors.setModel(directorsModel);
        } catch (Exception ex) {
            Logger.getLogger(CRUDPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
