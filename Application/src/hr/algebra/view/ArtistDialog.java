/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hr.algebra.view;

import hr.algebra.dal.Repository;
import hr.algebra.dal.RepositoryFactory;
import hr.algebra.models.Artist;
import hr.algebra.models.ArtistTransferable;
import hr.algebra.models.Movie;
import hr.algebra.models.Role;
import hr.algebra.utils.MessageUtils;
import java.awt.Frame;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.DropMode;
import javax.swing.JComponent;
import javax.swing.ListModel;
import javax.swing.ListSelectionModel;
import javax.swing.TransferHandler;
import static javax.swing.TransferHandler.COPY;

/**
 *
 * @author arjan
 */
public class ArtistDialog extends javax.swing.JDialog {

    private Repository repo;
    private Movie selectedMovie;
    private List<Artist> artists;
    private List<Artist> allArtists;
    private DefaultListModel<Artist> artistsModel = new DefaultListModel<>();
    private DefaultListModel<Artist> allArtistsModel = new DefaultListModel<>();
    private Role role;

    public void setRole(Role role) {
        this.role = role;
    }

    public void setArtists(List<Artist> artists) {
        this.artists = artists;
    }

    /**
     * Creates new form ArtistDialog
     */
    public ArtistDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        initArtists();
//        initComponentstLabels();

    }

    public ArtistDialog(Frame owner, boolean modal, List<Artist> artists, Role role, Movie movie) {
        super(owner, modal);
        this.artists = artists;
        this.role = role;
        this.selectedMovie = movie;
        try {
            repo = RepositoryFactory.getRepository();
            List<Artist> allartists = manageArtists(repo.getArtists());
            artists.forEach(allartists::remove);
            allArtists = allartists;
            allartists.forEach(allArtistsModel::addElement);
            initComponents();
            initDragNDrop();
            initArtists();
            initLabels();
        } catch (Exception ex) {
            Logger.getLogger(ArtistDialog.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        lsCurrentArtists = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        lsAllArtist = new javax.swing.JList<>();
        lblCurrentArtists = new javax.swing.JLabel();
        lblAllArtist = new javax.swing.JLabel();
        btnSave = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jScrollPane1.setViewportView(lsCurrentArtists);

        jScrollPane3.setViewportView(lsAllArtist);

        jScrollPane2.setViewportView(jScrollPane3);

        lblCurrentArtists.setText("Artist in this movies");

        lblAllArtist.setText("All artists");

        btnSave.setText("SAVE");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnSave, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblCurrentArtists))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblAllArtist))))
                .addGap(32, 32, 32))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCurrentArtists)
                    .addComponent(lblAllArtist))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 373, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(43, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        artists.forEach(a -> {
            try {
                List<Artist> tmp = repo.getArtistsForMovie(selectedMovie.getId());
                if (!tmp.contains(a)) {
                    repo.addArtistForMovie(a, selectedMovie);
                }
            } catch (Exception ex) {
                Logger.getLogger(ArtistDialog.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
        MessageUtils.showInformationMessage("SUCCESS", "Movie succesfully updated!");
        this.show(false);
    }//GEN-LAST:event_btnSaveActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ArtistDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ArtistDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ArtistDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ArtistDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ArtistDialog dialog = new ArtistDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSave;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblAllArtist;
    private javax.swing.JLabel lblCurrentArtists;
    private javax.swing.JList<Artist> lsAllArtist;
    private javax.swing.JList<Artist> lsCurrentArtists;
    // End of variables declaration//GEN-END:variables

    private void initLabels() {
        if ("Glumac".equals(role.getName().trim())) {
            lblCurrentArtists.setText("Actors in this movie");
            lblAllArtist.setText("All actors");
            this.setTitle("Edit actors");

        } else {
            lblCurrentArtists.setText("Directors in this movie");
            lblAllArtist.setText("All directors");
            this.setTitle("Edit directors");
        }

    }

    private void initArtists() {
        artistsModel.clear();
        artists.forEach(artistsModel::addElement);
        lsCurrentArtists.setDropMode(DropMode.ON);
        lsCurrentArtists.setTransferHandler(new ImportTransferHandler());
        lsCurrentArtists.setModel(artistsModel);

        allArtistsModel.clear();
        lsAllArtist.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        lsAllArtist.setDragEnabled(true);
        lsAllArtist.setTransferHandler(new ExportTransferHandler());
        allArtists.forEach(allArtistsModel::addElement);
        lsAllArtist.setModel(allArtistsModel);

    }

    private void initDragNDrop() {

        lsCurrentArtists.setDropMode(DropMode.ON);
        lsCurrentArtists.setTransferHandler(new ImportTransferHandler());

        lsAllArtist.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        lsAllArtist.setDragEnabled(true);
        lsAllArtist.setTransferHandler(new ExportTransferHandler());

    }

    private List<Artist> manageArtists(List<Artist> allartists) {
        List<Artist> temp = new ArrayList<>();
        for (Artist art : allartists) {
            if (art.getRole().getName().trim().equals(role.getName().trim())) {
                temp.add(art);
            }
        }

        return temp;
    }

    private class ImportTransferHandler extends TransferHandler {

        @Override
        public boolean canImport(TransferSupport support) {
            return support.isDataFlavorSupported(ArtistTransferable.ARTIST_FLAVOR);
        }

        @Override
        public boolean importData(TransferSupport support) {
            Transferable transferable = support.getTransferable();
            try {
                Artist add = (Artist) transferable.getTransferData(ArtistTransferable.ARTIST_FLAVOR);
                if (artists.add(add)) {
                    allArtists.remove(add);
                    initArtists();
                    return true;
                }
            } catch (UnsupportedFlavorException | IOException ex) {
                Logger.getLogger(ArtistDialog.class.getName()).log(Level.SEVERE, null, ex);
            }
            return false;
        }
    }

    private class ExportTransferHandler extends TransferHandler {

        @Override
        public int getSourceActions(JComponent c) {
            return COPY;
        }

        @Override
        public Transferable createTransferable(JComponent c) {
            return new ArtistTransferable(lsAllArtist.getSelectedValue());
        }

    }
}
